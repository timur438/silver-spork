from aiogram import types, F
from aiogram.filters.command import Command
from aiogram.filters.text import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from bot import dp
from database.db_session import get_db
from database.models import User, Bank, Card
from states.card_states import CardStates

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–æ–ª–µ–π
role_1_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="üè¶ –î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫"), KeyboardButton(text="üè¶ –£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫")],
    ],
    resize_keyboard=True,
    selective=True
)

role_2_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∏ –°—ä—ë–º"), KeyboardButton(text="üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã")],
        [KeyboardButton(text="üè¶ –î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫"), KeyboardButton(text="üè¶ –£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫")],
        [KeyboardButton(text="üí∏ –ü–µ—Ä–µ–≤–æ–¥")],
    ],
    resize_keyboard=True,
    selective=True
)

role_3_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∏ –°—ä—ë–º"), KeyboardButton(text="üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã")],
        [KeyboardButton(text="üè¶ –î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫"), KeyboardButton(text="üè¶ –£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫")],
        [KeyboardButton(text="üí∏ –ü–µ—Ä–µ–≤–æ–¥"), KeyboardButton(text="üîÑ –û–±–Ω—É–ª–∏—Ç—å –∫–∞—Å—Å—É")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
    ],
    resize_keyboard=True,
    selective=True
)

role_4_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üí∏ –°—ä—ë–º"), KeyboardButton(text="üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É"), KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã")],
        [KeyboardButton(text="üè¶ –î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫"), KeyboardButton(text="üè¶ –£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫")],
        [KeyboardButton(text="üí∏ –ü–µ—Ä–µ–≤–æ–¥"), KeyboardButton(text="üîÑ –û–±–Ω—É–ª–∏—Ç—å –∫–∞—Å—Å—É")],
        [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üîí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")],
    ],
    resize_keyboard=True,
    selective=True
)

@dp.message(Command("menu"))
async def cmd_menu(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.username == message.from_user.username).first()
    if user:
        if user.role == 1:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=role_1_keyboard)
        elif user.role == 2:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=role_2_keyboard)
        elif user.role == 3:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=role_3_keyboard)
        elif user.role == 4:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=role_4_keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message(F.text == "üí∏ –°—ä—ë–º")
async def cmd_withdraw(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è —Å—Ä–µ–¥—Å—Ç–≤.")

@dp.message(F.text == "üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
async def cmd_add_card(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
    await state.set_state(CardStates.adding_bank)

@dp.message(CardStates.adding_bank)
async def process_bank(message: types.Message, state: FSMContext):
    db = next(get_db())
    bank = db.query(Bank).filter(Bank.name == message.text).first()
    if bank:
        await state.update_data(bank_id=bank.id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã:")
        await state.set_state(CardStates.adding_last_four_digits)
    else:
        await message.answer("–ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(CardStates.adding_bank)

@dp.message(CardStates.adding_last_four_digits)
async def process_last_four_digits(message: types.Message, state: FSMContext):
    await state.update_data(last_four_digits=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç:")
    await state.set_state(CardStates.adding_daily_limit)

@dp.message(CardStates.adding_daily_limit)
async def process_daily_limit(message: types.Message, state: FSMContext):
    db = next(get_db())
    data = await state.get_data()
    bank_id = data.get('bank_id')
    last_four_digits = data.get('last_four_digits')
    daily_limit = float(message.text)

    card = Card(
        bank_id=bank_id,
        last_four_digits=last_four_digits,
        daily_limit=daily_limit,
        remaining_limit=daily_limit,
        current_balance=0.0
    )
    db.add(card)
    db.commit()
    await message.answer("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É")
async def cmd_remove_card(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã:")
    await state.set_state(CardStates.removing_last_four_digits)

@dp.message(CardStates.removing_last_four_digits)
async def process_remove_card(message: types.Message, state: FSMContext):
    db = next(get_db())
    card = db.query(Card).filter(Card.last_four_digits == message.text).first()
    if card:
        db.delete(card)
        db.commit()
        await message.answer("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã")
async def cmd_remove_all_cards(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–∞—Ä—Ç.")

@dp.message(F.text == "üè¶ –î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫")
async def cmd_add_bank(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")

@dp.message(F.text == "üè¶ –£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫")
async def cmd_remove_bank(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∞–Ω–∫–∞.")

@dp.message(F.text == "üí∏ –ü–µ—Ä–µ–≤–æ–¥")
async def cmd_transfer(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.")

@dp.message(F.text == "üîÑ –û–±–Ω—É–ª–∏—Ç—å –∫–∞—Å—Å—É")
async def cmd_casher_reset(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∫–∞—Å—Å—ã.")

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_info(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.message(F.text == "üîí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
async def cmd_change_pass(message: types.Message):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è.")
