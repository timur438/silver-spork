import re
from aiogram import types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from bot import dp
from database.db_session import get_db
from database.models import User, Bank, Card
from states import CardStates, BankStates
from decorators import role_required

def parse_amount(amount_str):
    amount_str = amount_str.replace(' ', '').replace('.', '').replace(',', '')
    amount = int(amount_str)
    return amount

@dp.message(F.text == "üí∏ –°—ä—ë–º")
@role_required(2)
async def cmd_withdraw(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã:")
    await state.set_state(CardStates.withdraw_card_number)

@dp.message(CardStates.withdraw_card_number)
async def process_withdraw_card_number(message: types.Message, state: FSMContext):
    if re.match(r'^\d{4}$', message.text):
        await state.update_data(last_four_digits=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400 –∏–ª–∏ 400.000):")
        await state.set_state(CardStates.withdraw_amount)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã.")
        await state.set_state(CardStates.withdraw_card_number)

@dp.message(CardStates.withdraw_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    amount = parse_amount(message.text)
    data = await state.get_data()
    last_four_digits = data.get('last_four_digits')

    db = next(get_db())
    card = db.query(Card).filter(Card.last_four_digits == last_four_digits).first()

    if card and card.remaining_limit >= amount:
        await state.update_data(amount=amount)
        await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ {amount} —Å –∫–∞—Ä—Ç—ã (–¥–∞/–Ω–µ—Ç):")
        await state.set_state(CardStates.withdraw_confirm)
    else:
        await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@dp.message(CardStates.withdraw_confirm)
async def process_withdraw_confirm(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        data = await state.get_data()
        last_four_digits = data.get('last_four_digits')
        amount = data.get('amount')

        db = next(get_db())
        card = db.query(Card).filter(Card.last_four_digits == last_four_digits).first()

        if card:
            card.remaining_limit -= amount
            db.commit()
            await message.answer(f"–° –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ {amount}.")
        else:
            await message.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
    else:
        await message.answer("–°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()

@dp.message(F.text == "üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
async def cmd_add_card(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
    await state.set_state(CardStates.adding_bank)

@dp.message(CardStates.adding_bank)
async def process_bank(message: types.Message, state: FSMContext):
    db = next(get_db())
    bank = db.query(Bank).filter(Bank.name == message.text).first()
    if bank:
        await state.update_data(bank_id=bank.id)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã:")
        await state.set_state(CardStates.adding_last_four_digits)
    else:
        await message.answer("–ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(CardStates.adding_bank)

@dp.message(CardStates.adding_last_four_digits)
async def process_last_four_digits(message: types.Message, state: FSMContext):
    if re.match(r'^\d{4}$', message.text):
        await state.update_data(last_four_digits=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400000 –∏–ª–∏ 400.000):")
        await state.set_state(CardStates.adding_daily_limit)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã.")
        await state.set_state(CardStates.adding_last_four_digits)

@dp.message(CardStates.adding_daily_limit)
async def process_daily_limit(message: types.Message, state: FSMContext):
    daily_limit = parse_amount(message.text)
    db = next(get_db())
    data = await state.get_data()
    bank_id = data.get('bank_id')
    last_four_digits = data.get('last_four_digits')

    card = Card(
        bank_id=bank_id,
        last_four_digits=last_four_digits,
        daily_limit=daily_limit,
        remaining_limit=daily_limit
    )
    db.add(card)
    db.commit()
    await message.answer("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É")
async def cmd_remove_card(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã:")
    await state.set_state(CardStates.removing_last_four_digits)

@dp.message(CardStates.removing_last_four_digits)
async def process_remove_card(message: types.Message, state: FSMContext):
    db = next(get_db())
    card = db.query(Card).filter(Card.last_four_digits == message.text).first()
    if card:
        db.delete(card)
        db.commit()
        await message.answer("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    else:
        await message.answer("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã")
@role_required(3)
async def cmd_remove_all_cards(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç (–¥–∞/–Ω–µ—Ç):")
    await state.set_state(CardStates.removing_all_cards)

@dp.message(CardStates.removing_all_cards)
async def process_remove_all_cards(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        db = next(get_db())
        db.query(Card).delete()
        db.commit()
        await message.answer("–í—Å–µ –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

@dp.message(F.text == "üè¶ –î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫")
async def cmd_add_bank(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
    await state.set_state(BankStates.checking_bank_name)

@dp.message(BankStates.checking_bank_name)
async def process_check_bank(message: types.Message, state: FSMContext):
    db = next(get_db())
    bank = db.query(Bank).filter(Bank.name == message.text).first()
    if bank:
        await message.answer("–ë–∞–Ω–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(BankStates.checking_bank_name)
    else:
        bank = Bank(name=message.text)
        db.add(bank)
        db.commit()
        await message.answer("–ë–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        await state.clear()

@dp.message(F.text == "üè¶ –£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫")
async def cmd_remove_bank(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
    await state.set_state(BankStates.removing_bank_name)

@dp.message(BankStates.removing_bank_name)
async def process_remove_bank(message: types.Message, state: FSMContext):
    db = next(get_db())
    bank = db.query(Bank).filter(Bank.name == message.text).first()
    if bank:
        db.delete(bank)
        db.commit()
        await message.answer("–ë–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer("–ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message(F.text == "üí∏ –ü–µ—Ä–µ–≤–æ–¥")
@role_required(3)
async def cmd_transfer(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.")

@dp.message(F.text == "üîÑ –û–±–Ω—É–ª–∏—Ç—å –∫–∞—Å—Å—É")
@role_required(3)
async def cmd_casher_reset(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –∫–∞—Å—Å—ã.")

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@role_required(2)
async def cmd_info(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

