import re
from aiogram import types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp, bot
from database.db_session import get_db
from database.models import User, Bank, Card
from states import CardStates, BankStates
from keyboards.menu_keyboards import role_1_keyboard, role_2_keyboard, role_3_keyboard, role_4_keyboard
from utils.decorators import role_required

def parse_amount(amount_str):
    amount_str = amount_str.replace(' ', '').replace('.', '').replace(',', '')
    amount = int(amount_str)
    return amount

@dp.message(F.text == "üí∏ –°—ä—ë–º")
@role_required(2)
async def cmd_withdraw(message: types.Message, state: FSMContext):
    await state.clear()
    db = next(get_db())
    cards = db.query(Card).all()
    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç.")
        return

    card_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{card.last_four_digits} ({card.bank_name})", callback_data=f"card_{card.last_four_digits}")]
            for card in cards
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=card_keyboard)
    await state.set_state(CardStates.withdraw_card_number)

@dp.callback_query(F.data.startswith("card_"))
async def process_withdraw_card_number_callback(callback: types.CallbackQuery, state: FSMContext):
    last_four_digits = callback.data.split("_")[1]
    await state.update_data(last_four_digits=last_four_digits)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400 –∏–ª–∏ 400.000):")
    await state.set_state(CardStates.withdraw_amount)

@dp.message(CardStates.withdraw_amount)
async def process_withdraw_amount(message: types.Message, state: FSMContext):
    amount = parse_amount(message.text)
    data = await state.get_data()
    last_four_digits = data.get('last_four_digits')

    db = next(get_db())
    card = db.query(Card).filter(Card.last_four_digits == last_four_digits).first()
    

    if card and card.remaining_limit >= amount:
        await state.update_data(amount=amount)
        confirm_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–î–∞", callback_data="confirm_yes"), InlineKeyboardButton(text="–ù–µ—Ç", callback_data="confirm_no")]
            ]
        )
        await message.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–ø–∏—Å–∞–Ω–∏–µ {amount} —Å –∫–∞—Ä—Ç—ã:", reply_markup=confirm_keyboard)
        await state.set_state(CardStates.withdraw_confirm)
    else:
        await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()

@dp.callback_query(F.data.startswith("confirm_"))
async def process_withdraw_confirm_callback(callback: types.CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[1]
    if action == "yes":
        data = await state.get_data()
        last_four_digits = data.get('last_four_digits')
        amount = data.get('amount')

        db = next(get_db())
        card = db.query(Card).filter(Card.last_four_digits == last_four_digits).first()
        user = db.query(User).filter(User.username == callback.from_user.username).first()

        if card:
            card.remaining_limit -= amount
            user.balance += amount
            db.commit()
            await callback.message.edit_text(f"–° –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω–æ {amount}.")

            channel_id = -1002436565133
            text = (
                f"–Æ–∑–µ—Ä @{callback.from_user.username} —Å–Ω—è–ª {amount:,} —Å –∫–∞—Ä—Ç—ã {card.bank_name} | {card.last_four_digits}\n"
                f"–û—Å—Ç–∞–≤—à–∏–π—Å—è –ª–∏–º–∏—Ç –∫–∞—Ä—Ç—ã: {card.remaining_limit:,}\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å —é–∑–µ—Ä–∞: {user.balance:,}"
            )
            await bot.send_message(chat_id=channel_id, text=text)
        else:
            await callback.message.edit_text("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
    else:
        await callback.message.edit_text("–°–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()

@dp.message(F.text == "üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç—É")
@role_required(1)
async def cmd_add_card(message: types.Message, state: FSMContext):
    await state.clear()
    db = next(get_db())
    banks = db.query(Bank).all()
    if not banks:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–∞–Ω–∫.")
        return

    bank_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=bank.name, callback_data = f"select_bank|{bank.name}")]
            for bank in banks
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫:", reply_markup=bank_keyboard)

@dp.callback_query(lambda c: c.data.split("|")[0] == "select_bank")
async def process_select_bank_callback(callback: types.CallbackQuery, state: FSMContext):
    action, bank_name = callback.data.split("|")
    db = next(get_db())
    bank = db.query(Bank).filter(Bank.name == bank_name).first()
    if bank:
        await state.update_data(bank_id=bank.id, bank_name=bank.name)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã –∫–∞—Ä—Ç—ã:")
        await state.set_state(CardStates.adding_last_four_digits)
    else:
        await callback.message.edit_text("–ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(CardStates.adding_bank)

@dp.message(CardStates.adding_last_four_digits)
async def process_last_four_digits(message: types.Message, state: FSMContext):
    if re.match(r'^\d{4}$', message.text):
        await state.update_data(last_four_digits=message.text)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É—Ç–æ—á–Ω—ã–π –ª–∏–º–∏—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400000 –∏–ª–∏ 400.000):")
        await state.set_state(CardStates.adding_daily_limit)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã.")
        await state.set_state(CardStates.adding_last_four_digits)

@dp.message(CardStates.adding_daily_limit)
async def process_daily_limit(message: types.Message, state: FSMContext):
    daily_limit = parse_amount(message.text)
    db = next(get_db())
    data = await state.get_data()
    bank_id = data.get('bank_id')
    last_four_digits = data.get('last_four_digits')
    bank_name = data.get('bank_name')

    card = Card(
        bank_id=bank_id,
        last_four_digits=last_four_digits,
        daily_limit=daily_limit,
        remaining_limit=daily_limit,
        added_by=message.from_user.username,
        bank_name=bank_name
    )
    db.add(card)
    db.commit()
    await message.answer("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    await state.clear()

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫–∞—Ä—Ç—É")
@role_required(1)
async def cmd_remove_card(message: types.Message, state: FSMContext):
    await state.clear()
    db = next(get_db())
    user = db.query(User).filter(User.username == message.from_user.username).first()

    if user.role > 1:
        cards = db.query(Card).all()
    else:
        cards = db.query(Card).filter(Card.added_by == message.from_user.username).all()

    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç.")
        return

    card_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"{card.last_four_digits} ({card.bank_name})", callback_data=f"delete_card_{card.last_four_digits}")]
            for card in cards
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=card_keyboard)

@dp.callback_query(F.data.startswith("delete_card_"))
async def process_remove_card_callback(callback: types.CallbackQuery, state: FSMContext):
    last_four_digits = callback.data.split("_")[2]
    db = next(get_db())
    card = db.query(Card).filter(Card.last_four_digits == last_four_digits).first()
    user = db.query(User).filter(User.username == callback.from_user.username).first()
    if card:
        if callback.from_user.username == card.added_by or user.role >= 2:
            db.delete(card)
            db.commit()
            await callback.message.edit_text("–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –∫–∞—Ä—Ç—ã.")
    else:
        await callback.message.edit_text("–ö–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç—ã")
@role_required(3)
async def cmd_remove_all_cards(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç (–¥–∞/–Ω–µ—Ç):", reply_markup=types.ReplyKeyboardMarkup(
        keyboard=[types.KeyboardButton(text="–î–∞"), types.KeyboardButton(text="–ù–µ—Ç")]
    ))
    await state.set_state(CardStates.removing_all_cards)

@dp.message(CardStates.removing_all_cards)
async def process_remove_all_cards(message: types.Message, state: FSMContext):
    if message.text.lower() == "–¥–∞":
        db = next(get_db())
        db.query(Card).delete()
        db.commit()
        await message.answer("–í—Å–µ –∫–∞—Ä—Ç—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    else:
        await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ä—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

@dp.message(F.text == "üè¶ –î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫")
@role_required(1)
async def cmd_add_bank(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞:")
    await state.set_state(BankStates.checking_bank_name)

@dp.message(BankStates.checking_bank_name)
async def process_check_bank(message: types.Message, state: FSMContext):
    db = next(get_db())
    bank = db.query(Bank).filter(Bank.name == message.text).first()
    if bank:
        await message.answer("–ë–∞–Ω–∫ —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(BankStates.checking_bank_name)
    else:
        bank = Bank(name=message.text, added_by=message.from_user.username)
        db.add(bank)
        db.commit()
        await message.answer("–ë–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
        await state.clear()

@dp.message(F.text == "üè¶ –£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫")
@role_required(1)
async def cmd_remove_bank(message: types.Message, state: FSMContext):
    await state.clear()
    db = next(get_db())
    user = db.query(User).filter(User.username == message.from_user.username).first()

    if user.role > 1:
        banks = db.query(Bank).all()
    else:
        banks = db.query(Bank).filter(Bank.added_by == message.from_user.username).all()
    
    if not banks:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤.")
        return

    bank_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=bank.name, callback_data = f"delete_bank|{bank.name}")]
            for bank in banks
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±–∞–Ω–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=bank_keyboard)

@dp.callback_query(lambda c: c.data.split("|")[0] == "delete_bank")
async def process_remove_bank_callback(callback: types.CallbackQuery, state: FSMContext):
    action, bank_name = callback.data.split("|")
    db = next(get_db())
    bank = db.query(Bank).filter(Bank.name == bank_name).first()
    user = db.query(User).filter(User.username == callback.from_user.username).first()

    if bank:
        if callback.from_user.username == bank.added_by or user.role >= 2:
            db.delete(bank)
            db.commit()
            await callback.message.edit_text("–ë–∞–Ω–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
        else:
            await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –±–∞–Ω–∫–∞.")
    else:
        await callback.message.edit_text("–ë–∞–Ω–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

@dp.message(F.text == "üí∏ –ü–µ—Ä–µ–≤–æ–¥")
@role_required(3)
async def cmd_transfer(message: types.Message, state: FSMContext):
    await state.clear()
    db = next(get_db())
    users = db.query(User).filter(User.role > 1).all()
    if not users:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤.")
        return

    user_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=user.username, callback_data = f"transfer_from|{user.username}")]
            for user in users
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å —á—å–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞:", reply_markup=user_keyboard)
    await state.set_state("transfer_select_from")

@dp.callback_query(lambda c: c.data.split("|")[0] == "transfer_from")
async def process_transfer_from(callback: types.CallbackQuery, state: FSMContext):
    action, username_from = callback.data.split("|")
    await state.update_data(username_from=username_from)

    db = next(get_db())
    users = db.query(User).filter(User.role > 1, User.username != username_from).all()
    user_keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=user.username, callback_data = f"transfer_to|{user.username}")]
            for user in users
        ]
    )
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ —á–µ–π –±–∞–ª–∞–Ω—Å –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã —Å—Ä–µ–¥—Å—Ç–≤–∞:", reply_markup=user_keyboard)
    await state.set_state("transfer_select_to")

@dp.callback_query(lambda c: c.data.split("|")[0] == "transfer_to")
async def process_transfer_to(callback: types.CallbackQuery, state: FSMContext):
    daction, username_to = callback.data.split("|")
    await state.update_data(username_to=username_to)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400 –∏–ª–∏ 400.000):")
    await state.set_state("transfer_amount")

@dp.message(F.state == "transfer_amount")
async def process_transfer_amount(message: types.Message, state: FSMContext):
    try:
        amount = parse_amount(message.text)
        data = await state.get_data()
        username_from = data.get('username_from')
        username_to = data.get('username_to')

        db = next(get_db())
        user_from = db.query(User).filter(User.username == username_from).first()
        user_to = db.query(User).filter(User.username == username_to).first()

        if user_from and user_to and user_from.role > 1 and user_to.role > 1:
            if user_from.balance >= amount:
                user_from.balance -= amount
                user_to.balance += amount
                db.commit()
                await message.answer(f"–ü–µ—Ä–µ–≤–æ–¥ {amount} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å {username_from} –Ω–∞ {username_to}.")
            else:
                await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ {username_from}.")
        else:
            await message.answer("–ü–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ –∏—Ö —Ä–æ–ª–∏.")
        await state.clear()
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")

@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
@role_required(1)
async def cmd_statistics(message: types.Message, state: FSMContext):
    await state.clear()
    db = next(get_db())
    cards = db.query(Card).all()

    if not cards:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç.")
        return

    header = (
        "–ö–∞—Ä—Ç–∞  | –ë–∞–Ω–∫     | –õ–∏–º–∏—Ç     | –û—Å—Ç–∞—Ç–æ–∫   \n"
        "-------|----------|-----------|-----------"
    )

    def format_number(number):
        return f"{int(number):,}".replace(',', ' ')

    rows = [
        f"{card.last_four_digits:<7}| {card.bank_name[:7]:<9}| {format_number(card.daily_limit):>9} | {format_number(card.remaining_limit):>10}"
        for card in cards
    ]

    table = header + "\n" + "\n".join(rows)

    await message.answer(f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n```\n{table}\n```", parse_mode="Markdown")

@dp.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å") 
@role_required(1)
async def cmd_my_profile(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.username == message.from_user.username).first()

    if user:
        profile_info = (
            f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å:**\n"
            f"üìå **ID:** {user.id}\n"
            f"üìõ **–Æ–∑–µ—Ä–Ω–µ–π–º:** @{user.username}\n"
            f"üìù **–ü–æ–ª–Ω–æ–µ –∏–º—è:** {user.full_name if user.full_name else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
            f"üîë **–†–æ–ª—å:** {user.role} ({get_role_name(user.role)})\n"
            f"üí∞ **–ë–∞–ª–∞–Ω—Å:** {user.balance:.2f} üíµ"
        )
        await message.answer(profile_info, parse_mode="HTML")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")

def get_role_name(role_id):
    roles = {
        1: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
        2: "–ö—ç—à–µ—Ä",
        3: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
        4: "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω",
    }
    return roles.get(role_id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")

