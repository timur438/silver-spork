from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from bot import dp
from datetime import datetime
from database.db_session import get_db
from database.models import User, Blacklist
from keyboards.admin_keyboards import role_3_admin_keyboard, role_4_admin_keyboard
from keyboards.menu_keyboards import role_3_keyboard, role_4_keyboard
from states import AdminStates
from utils.decorators import role_required
from database.models import AdminSettings
from utils.password_utils import hash_password, verify_password

def get_users_keyboard(role: int) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —á—å—è —Ä–æ–ª—å —Ä–∞–≤–Ω–∞ –∏–ª–∏ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π.
    """
    db = next(get_db())
    users = db.query(User).filter(User.role <= role).all()
    keyboard = [
        [InlineKeyboardButton(text=f"@{user.username}", callback_data=f"username|{user.username}")]
        for user in users
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def format_balance(balance):
    return f"{balance:,.0f}".replace(",", " ")

@dp.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
@role_required(3)
async def cmd_admin_panel(message: types.Message, state: FSMContext):
    await state.clear()
    db = next(get_db())
    user = db.query(User).filter(User.username == message.from_user.username).first()

    if user.role == 3:
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=role_3_admin_keyboard)
    elif user.role == 4:
        await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=role_4_admin_keyboard)


@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.username == message.from_user.username).first()

    if user.role == 3:
        await message.answer("–û–±—â–µ–µ –º–µ–Ω—é", reply_markup=role_3_keyboard) 
    elif user.role == 4:
        await message.answer("–û–±—â–µ–µ –º–µ–Ω—é", reply_markup=role_4_keyboard) 
    
    await state.clear()

@dp.message(F.text == "üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–µ—Ä–∞")
@role_required(3)
async def cmd_add_cashier(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∫—ç—à–µ—Ä–æ–º:", reply_markup=get_users_keyboard(1))
    await state.set_state(AdminStates.adding_cashier)


@dp.callback_query(AdminStates.adding_cashier)
async def process_add_cashier_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action, username = callback_query.data.split("|")
    db = next(get_db())
    user = db.query(User).filter(User.username == username).first()

    if user:
        if user.role >= 2:
            await callback_query.message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é.")
        else:
            user.role = 2
            db.commit()
            await callback_query.message.answer(f"–ö—ç—à–µ—Ä @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()


@dp.message(F.text == "üè¶ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
@role_required(4)
async def cmd_add_admin(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–æ–º:", reply_markup=get_users_keyboard(2))
    await state.set_state(AdminStates.adding_admin)


@dp.callback_query(AdminStates.adding_admin)
async def process_add_admin_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action, username = callback_query.data.split("|")
    db = next(get_db())
    user = db.query(User).filter(User.username == username).first()

    if user:
        if user.role >= 3:
            await callback_query.message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π —Ä–æ–ª—å—é.")
        else:
            user.role = 3
            db.commit()
            await callback_query.message.answer(f"–ê–¥–º–∏–Ω @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.clear()


@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
@role_required(4)
async def cmd_remove_admin(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=get_users_keyboard(3))
    await state.set_state(AdminStates.removing_admin)


@dp.callback_query(AdminStates.removing_admin)
async def process_remove_admin_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action, username = callback_query.data.split("|")
    db = next(get_db())
    user = db.query(User).filter(User.username == username).first()

    if user and user.role == 3:
        confirmation_keyboard = InlineKeyboardMarkup(row_width=2)
        confirmation_keyboard.add(
            InlineKeyboardButton(text="–î–∞", callback_data=f"confirm_remove_admin|{username}"),
            InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel")
        )
        await callback_query.message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞ @{username}?", 
            reply_markup=confirmation_keyboard
        )
    else:
        await callback_query.message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await state.clear()


@dp.callback_query(AdminStates.confirm_removal)
async def process_confirm_removal_admin(callback_query: types.CallbackQuery, state: FSMContext):
    action, username = callback_query.data.split("|")

    db = next(get_db())
    user = db.query(User).filter(User.username == username).first()

    if action == "confirm_remove_admin" and user:
        user.role = 1
        db.commit()
        await callback_query.message.answer(f"–ê–¥–º–∏–Ω @{username} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    elif action == "cancel":
        await callback_query.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    
    await state.clear()

@dp.message(F.text == "üîí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
@role_required(4)
async def cmd_change_pass(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AdminStates.changing_password)


@dp.message(AdminStates.changing_password)
async def process_change_pass(message: types.Message, state: FSMContext):
    db = next(get_db())
    current_password = message.text

    admin_settings = db.query(AdminSettings).first()
    if not admin_settings:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    if verify_password(current_password, admin_settings.hashed_password):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        await state.set_state(AdminStates.new_password)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(AdminStates.changing_password)


@dp.message(AdminStates.new_password)
async def process_new_password(message: types.Message, state: FSMContext):
    new_password = message.text

    db = next(get_db())
    admin_settings = db.query(AdminSettings).first()
    if admin_settings:
        admin_settings.hashed_password = hash_password(new_password)
        db.commit()
        await message.answer("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    else:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    
    await state.clear()

def get_view_users_keyboard(role: int) -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —á—å—è —Ä–æ–ª—å —Ä–∞–≤–Ω–∞ –∏–ª–∏ –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π.
    """
    db = next(get_db())
    users = db.query(User).filter(User.role <= role).all()
    keyboard = [
        [InlineKeyboardButton(text=f"@{user.username}", callback_data = f"view_user|{user.username}")]
        for user in users
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@role_required(3)
async def cmd_user_profile(message: types.Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º:",
        reply_markup=get_view_users_keyboard(4)
    )
    await state.set_state(AdminStates.viewing_user_profile)

@dp.callback_query(lambda c: c.data.split("|")[0] == "view_user")
async def process_user_profile_callback(callback_query: types.CallbackQuery, state: FSMContext):
    action, username = callback_query.data.split("|")

    db = next(get_db())
    
    user = db.query(User).filter(User.username == username).first()
    
    if user:
        roles = {
            1: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            2: "–ö—ç—à–µ—Ä",
            3: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            4: "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        role_name = roles.get(user.role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
        
        await callback_query.message.answer(
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.username}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_balance(user.balance)}\n"
            f"üîë –†–æ–ª—å: {role_name}"
        )
    else:
        await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    await callback_query.answer()

@dp.message(AdminStates.viewing_user_profile)
async def process_user_profile(message: types.Message, state: FSMContext):
    username = message.text.lstrip("@")
    db = next(get_db())
    
    user = db.query(User).filter(User.username == username).first()
    
    if user:
        balance = " ".join(reversed([str(user.balance)[::-1][i:i+3] for i in range(0, len(str(user.balance)), 3)]))[::-1]
        
        roles = {
            1: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            2: "–ö—ç—à–µ—Ä",
            3: "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            4: "–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        role_name = roles.get(user.role, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å")
        
        await message.answer(
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.username}\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {balance}\n"
            f"üîë –†–æ–ª—å: {role_name}"
        )
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    await state.clear()

@dp.message(F.text == "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@role_required(4)  
async def cmd_block_user(message: types.Message, state: FSMContext):
    db = next(get_db())
    users = db.query(User).filter(User.role < 4).all() 
    
    if not users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
        return
    
    keyboard = InlineKeyboardMarkup(row_width=2)
    for user in users:
        keyboard.add(InlineKeyboardButton(f"@{user.username}", callback_data=f"block_user|{user.username}"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(AdminStates.blocking_user)

@dp.callback_query(AdminStates.blocking_user)
async def process_block_user(callback_query: types.CallbackQuery, state: FSMContext):
    action, username = callback_query.data.split("|")
 
    if action == "block_user":
        db = next(get_db())
        user = db.query(User).filter(User.username == username).first()
    else:
        return
    
    if user:
        keyboard = InlineKeyboardMarkup(row_width=2)
        keyboard.add(
            InlineKeyboardButton("–î–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data = f"confirm_block|{username}"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_block")
        )

        await callback_query.message.answer(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}?",
            reply_markup=keyboard
        )
        await state.update_data(username=username)
    else:
        await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()

@dp.callback_query(AdminStates.blocking_user)
async def process_confirm_block_user(callback_query: types.CallbackQuery, state: FSMContext):
    action, username = callback_query.data.split("|")

    db = next(get_db())
    user = db.query(User).filter(User.username == username).first()

    if action == "confirm_block" and user:
        blacklisted_user = db.query(Blacklist).filter(Blacklist.username == username).first()

        if blacklisted_user:
            await callback_query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            await state.clear()
            return

        db.add(Blacklist(username=username, blocked_at=int(datetime.now().timestamp())))
        db.commit()

        db.delete(user)
        db.commit()

        await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã.")
    else:
        await callback_query.message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    
    await state.clear()

@dp.callback_query(F.data == "cancel_block")
async def cancel_block(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()


@dp.message(F.text == "‚ö° –û–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å")
@role_required(3)
async def cmd_reset_balance(message: types.Message, state: FSMContext):
    db = next(get_db())
    admin_user = db.query(User).filter(User.username == message.from_user.username).first()

    if not admin_user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    eligible_users = db.query(User).filter(User.role <= (admin_user.role - 1)).all()

    if not eligible_users:
        await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –¥–æ—Å—Ç—É–ø–Ω–æ–π –¥–ª—è –≤–∞—Å —Ä–æ–ª—å—é –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text=f"@{user.username} (–ë–∞–ª–∞–Ω—Å: {format_balance(user.balance)})", 
                callback_data=f"select_user_{user.id}"
            )]
            for user in eligible_users
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –±–∞–ª–∞–Ω—Å –Ω—É–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å:", reply_markup=keyboard)
    await state.set_state(AdminStates.selecting_user)

@dp.callback_query(AdminStates.selecting_user)
async def process_select_user(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.data.replace("select_user_", "")

    if not user_id.isdigit():
        await callback_query.message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    db = next(get_db())
    user = db.query(User).filter(User.id == int(user_id)).first()

    if not user:
        await callback_query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    await callback_query.message.answer(
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{user.username} (–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user.balance}).\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_balance_reset_keyboard()
    )
    await state.update_data(user_id=user.id, username=user.username)
    await state.set_state(AdminStates.confirm_reset_balance)

@dp.callback_query(AdminStates.confirm_reset_balance)
async def process_confirm_reset_balance(callback_query: types.CallbackQuery, state: FSMContext):
    action = callback_query.data
    data = await state.get_data()
    username = data.get('username')

    db = next(get_db())
    user = db.query(User).filter(User.username == username).first()

    if action == "reset_full":
        if user:
            user.balance = 0.0
            db.commit()
            await callback_query.message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª—ë–Ω.")
        else:
            await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    elif action == "reset_partial":
        await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –æ–±–Ω—É–ª–∏—Ç—å –±–∞–ª–∞–Ω—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.0):")
        await state.set_state(AdminStates.resetting_partial_balance)

@dp.message(AdminStates.resetting_partial_balance)
async def process_partial_balance(message: types.Message, state: FSMContext):
    amount = message.text
    amount = amount.replace('.', '')

    if not amount.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä, 1000 –∏–ª–∏ 20000.")
        return

    amount = int(amount) 

    if amount < 0:
        await message.answer("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    data = await state.get_data()
    username = data.get('username')

    db = next(get_db())
    user = db.query(User).filter(User.username == username).first()

    if user:
        if user.balance >= amount:
            user.balance -= amount
            db.commit()
            await message.answer(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –±—ã–ª —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {user.balance}.")
        else:
            await message.answer(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞ {amount}.")
    else:
        await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —é–∑–µ—Ä–Ω–µ–π–º–æ–º @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    
    await state.clear()

def get_balance_reset_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–±–Ω—É–ª–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data="reset_full")],
            [InlineKeyboardButton(text="–û–±–Ω—É–ª–∏—Ç—å –Ω–∞ —Å—É–º–º—É", callback_data="reset_partial")],
        ]
    )