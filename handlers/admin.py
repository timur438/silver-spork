from aiogram import types, F
from aiogram.fsm.context import FSMContext
from bot import dp
from database.db_session import get_db
from database.models import User, Bank, Card
from keyboards.admin_keyboards import role_3_admin_keyboard, role_4_admin_keyboard
from keyboards.menu_keyboards import role_3_keyboard, role_4_keyboard
from states import AdminStates
from decorators import role_required

@dp.message(F.text == "üõ†Ô∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")
@role_required(3)
async def cmd_admin_panel(message: types.Message, state: FSMContext):
    await state.clear()
    db = next(get_db())
    user = db.query(User).filter(User.id == message.from_user.id).first()

    if user.role == 3:
        await message.answer(reply_markup=role_3_admin_keyboard)
    elif user.role == 4:
        await message.answer(reply_markup=role_4_admin_keyboard)

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def cmd_back(message: types.Message, state: FSMContext):
    db = next(get_db())
    user = db.query(User).filter(User.id == message.from_user.id).first()

    if user.role == 3:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=role_3_keyboard) 
    elif user.role == 4:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=role_4_keyboard) 
    
    await state.clear()

@dp.message(F.text == "üí≥ –î–æ–±–∞–≤–∏—Ç—å –∫—ç—à–µ—Ä–∞")
@role_required(3)
async def cmd_add_cashier(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫—ç—à–µ—Ä–∞:")
    await state.set_state(AdminStates.adding_cashier)

@dp.message(AdminStates.adding_cashier)
async def process_add_cashier(message: types.Message, state: FSMContext):
    cashier_name = message.text
    db = next(get_db())
    user = db.query(User).filter(User.full_name == cashier_name).first()
    if user:
        user.role = 2 
        db.commit()
        await message.answer(f"–ö—ç—à–µ—Ä {cashier_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∫—ç—à–µ—Ä–∞")
@role_required(3)
async def cmd_remove_cashier(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫—ç—à–µ—Ä–∞:")
    await state.set_state(AdminStates.removing_cashier)

@dp.message(AdminStates.removing_cashier)
async def process_remove_cashier(message: types.Message, state: FSMContext):
    cashier_name = message.text
    db = next(get_db())
    user = db.query(User).filter(User.full_name == cashier_name).first()
    if user and user.role == 2:
        user.role = 1 
        db.commit()
        await message.answer(f"–ö—ç—à–µ—Ä {cashier_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer("–ö—ç—à–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∫–∞—Å—Å–∞—Ç–æ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message(F.text == "üè¶ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞")
@role_required(4)
async def cmd_add_admin(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∞:")
    await state.set_state(AdminStates.adding_admin)

@dp.message(AdminStates.adding_admin)
async def process_add_admin(message: types.Message, state: FSMContext):
    admin_name = message.text
    db = next(get_db())
    user = db.query(User).filter(User.full_name == admin_name).first()
    if user:
        user.role = 3  
        db.commit()
        await message.answer(f"–ê–¥–º–∏–Ω {admin_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")
    else:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message(F.text == "üóë –£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞")
@role_required(4)
async def cmd_remove_admin(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∞–¥–º–∏–Ω–∞:")
    await state.set_state(AdminStates.removing_admin)

@dp.message(AdminStates.removing_admin)
async def process_remove_admin(message: types.Message, state: FSMContext):
    admin_name = message.text
    db = next(get_db())
    user = db.query(User).filter(User.full_name == admin_name).first()
    if user and user.role == 3:
        user.role = 1 
        db.commit()
        await message.answer(f"–ê–¥–º–∏–Ω {admin_name} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
    else:
        await message.answer("–ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.clear()

@dp.message(F.text == "üîí –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
@role_required(4)
async def cmd_change_pass(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:")
    await state.set_state(AdminStates.changing_password)

@dp.message(AdminStates.changing_password)
async def process_change_pass(message: types.Message, state: FSMContext):
    current_password = message.text
    if current_password == "your_secret_password":  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        await state.set_state(AdminStates.new_password)
    else:
        await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(AdminStates.changing_password)

@dp.message(AdminStates.new_password)
async def process_new_password(message: types.Message, state: FSMContext):
    new_password = message.text
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
    await message.answer(f"–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
    await state.clear()

@dp.message(F.text == "üìä –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
@role_required(3)
async def cmd_user_actions(message: types.Message, state: FSMContext):
    await message.answer("–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
